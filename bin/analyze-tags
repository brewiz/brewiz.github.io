#!/usr/bin/env ruby
# frozen_string_literal: true

require 'yaml'
require 'optparse'

options = {}
options[:output_file] = nil
options[:file] = 'data/packages.yaml'
OptionParser.new do |opts|
  opts.banner = "Usage: analyze-tags [options]"
  opts.on('-w', "--write", "Write markdown analysis to analysis.md") do
    options[:write] = true
  end
  opts.on("--output FILE", "Specify output markdown filename (implies --write)") do |file|
    options[:write] = true
    options[:output_file] = file
  end
  opts.on("--file FILE", "Specify YAML file to analyze (default: data/packages.yaml)") do |file|
    options[:file] = file
  end
end.parse!

output = []

# Add document description and traceability info
output << "# Brewiz Tag Analysis"
output << ""
output << "Generated on: #{Time.now.strftime('%Y-%m-%d')} | Version: #{File.exist?('VERSION') ? File.read('VERSION').strip : 'N/A'}</br>"
output << "Analyzed file: #{options[:file]}"
output << ""

def wrap_md_space(text, width = 84)
  return text if text.length <= width
  lines = []
  text.split("\n").each do |paragraph|
    line = ''
    paragraph.split(/\s+/).each do |word|
      if line.length + word.length + 1 > width
        lines << line.rstrip
        line = ''
      end
      line += ' ' unless line.empty?
      line += word
    end
    lines << line.rstrip unless line.empty?
  end
  lines.join("\n")
end

output << "## Document Overview"
output << ""
overview_desc = "This document provides a comprehensive analysis of package tags in the Brewiz project. Each chapter summarizes a key aspect of tag usage, frequency, and categorization."
overview_bullets = [
  "- **Main Statistics**: Overview of package and tag counts.",
  "- **Packages With Less Than Two Tags**: Lists packages missing tags (if any).",
  "- **Most Common Tags (Top 10)**: Table of the most frequently used tags.",
  "- **All Tags With Frequency**: All tags, sorted by frequency, comma-separated.",
  "- **Tags Per Category (Top 10)**: Table of categories with the most unique tags and their most common tags.",
  "- **Suggestions & Questions**: Recommendations and open questions for further analysis."
]
output << wrap_md_space(overview_desc)
output << ""
overview_bullets.each { |b| output << wrap_md_space(b) }
output << ""

# Parse the YAML file
file_path = options[:file]
data = YAML.load_file(file_path)

# Initialize tracking variables
tag_counts = Hash.new(0)
tag_to_packages = Hash.new { |h, k| h[k] = [] }
tag_to_categories = Hash.new { |h, k| h[k] = Set.new }
packages_with_tags = 0
total_packages = 0
categories_with_tags = Set.new
packages_without_tags = []

# Process data
data.each do |category|
  category_id = category['id']
  category_has_tagged_packages = false

  if category['packages']
    category['packages'].each do |package|
      total_packages += 1

      if package['tags'] && !package['tags'].empty?
        packages_with_tags += 1
        category_has_tagged_packages = true

        package['tags'].each do |tag|
          tag_counts[tag] += 1
          tag_to_packages[tag] << package['name']
          tag_to_categories[tag].add(category_id)
        end
      else
        packages_without_tags << {
          'name' => package['name'],
          'category' => category_id,
          'category_name' => category['name']
        }
      end
    end
  end

  categories_with_tags.add(category_id) if category_has_tagged_packages
end

# Sort tags by frequency
sorted_tags = tag_counts.sort_by { |_tag, count| -count }

# Output main statistics
output << "## Main Statistics\n"
output << "Total packages: #{total_packages}  "
output << "Packages with tags: #{packages_with_tags} (#{(packages_with_tags.to_f / total_packages * 100).round(2)}%)  "
output << "Packages without tags: #{packages_without_tags.size} (#{(packages_without_tags.size.to_f / total_packages * 100).round(2)}%)  "
output << "Total unique tags: #{tag_counts.size}  "
output << "Categories with tagged packages: #{categories_with_tags.size}/#{data.size}  "
output << ""

# Packages without tags: only show if 1 or less, else skip
output << "## Packages With Less Than Two Tags\n"
if packages_without_tags.size == 0
  output << "All packages have tags.\n"
elsif packages_without_tags.size == 1
  output << "1 package without tags:\n"
  output << "| Package Name | Category |"
  output << "|--------------|----------|"
  package = packages_without_tags.first
  output << "| #{package['name']} | #{package['category_name']} (#{package['category']}) |"
  output << ""
end

# Output Most Common Tags as Markdown Table (pretty print)
output << "## Most Common Tags (Top 10)\n"
header = ["Rank", "Tag", "Count", "% of Tagged Packages"]
rows = sorted_tags.take(10).each_with_index.map do |(tag, count), index|
  percentage = (count.to_f / packages_with_tags * 100).round(2)
  [index + 1, tag, count, "#{percentage}%"]
end
col_widths = header.map.with_index do |h, i|
  ([h] + rows.map { |r| r[i].to_s }).map(&:length).max
end
format_row = ->(row) {
  "| " + row.each_with_index.map { |cell, i| cell.to_s.ljust(col_widths[i]) }.join(" | ") + " |"
}
output << format_row.call(header)
output << "|" + col_widths.map { |w| "-" * (w + 2) }.join("|") + "|"
rows.each { |row| output << format_row.call(row) }
output << ""

# Output Tags used only once section
single_use_tags = sorted_tags.select { |tag, count| count == 1 }.map(&:first)
if single_use_tags.any?
  output << "## Tags used only once\n"
  output << wrap_md_space("The following tags are used by only one package. Consider consolidating or reviewing these for consistency.")
  output << ""
  single_use_tags.each do |tag|
    pkgs = tag_to_packages[tag]
    output << wrap_md_space("- **#{tag}**: #{pkgs.join(', ')}")
  end
  output << ""
end

# Output Top 10 Categories by tag count as Markdown Table (pretty print)
output << "## Tags Per Category (Top 10)\n"
category_tags = Hash.new { |h, k| h[k] = Set.new }

data.each do |category|
  if category['packages']
    category['packages'].each do |package|
      if package['tags']
        package['tags'].each do |tag|
          category_tags[category['id']].add(tag)
        end
      end
    end
  end
end

sorted_categories = category_tags.sort_by { |_category, tags| -tags.size }
cat_header = ["Category", "Unique Tags", "Most Common Tags"]
cat_rows = sorted_categories.take(10).map do |category_id, tags|
  category_name = data.find { |c| c['id'] == category_id }['name']
  most_common = tags.to_a.sort_by { |tag| -tag_counts[tag] }.take(5).join(', ')
  [category_name, tags.size, most_common]
end
cat_col_widths = cat_header.map.with_index do |h, i|
  ([h] + cat_rows.map { |r| r[i].to_s }).map(&:length).max
end
cat_format_row = ->(row) {
  "| " + row.each_with_index.map { |cell, i| cell.to_s.ljust(cat_col_widths[i]) }.join(" | ") + " |"
}
output << cat_format_row.call(cat_header)
output << "|" + cat_col_widths.map { |w| "-" * (w + 2) }.join("|") + "|"
cat_rows.each { |row| output << cat_format_row.call(row) }
output << ""

# Output All Tags with Frequency, comma-separated, sorted by frequency
output << "## All Tags With Frequency (By Frequency, comma-separated)\n"
all_tags_with_freq = sorted_tags.map { |tag, count| "#{tag} (#{count})" }
tag_line = all_tags_with_freq.join(', ')
output << wrap_md_space(tag_line)
output << ""

output << "## Suggestions & Questions\n"
suggestions = []
categories_without_tags = data.select { |category| category['packages'] && !categories_with_tags.include?(category['id']) }
                             .map { |category| "#{category['id']} (#{category['name']})" }
if !categories_without_tags.empty?
  suggestions << "Categories without any tagged packages: #{categories_without_tags.join(', ')}"
end
suggestions << "Refer the 'All Tags With Frequency' section above for details on single-use tags."
suggestions << "Consider consolidating similar single-use tags for better organization."
suggestions << "Would you like to see trends over time or tag usage changes in future analyses?"
suggestions << "Should the markdown output be written to a file by default (e.g., analysis.md)?"
suggestions << "Would you like to add more filtering or sorting options to the script output?"
suggestions.each { |s| output << wrap_md_space("- #{s}") }
output << ""

# Print or write output
if options[:write]
  file = options[:output_file] || 'analysis.md'
  File.write(file, output.join("\n"))
  puts "Analysis saved to #{file}."
else
  puts output.join("\n")
end
